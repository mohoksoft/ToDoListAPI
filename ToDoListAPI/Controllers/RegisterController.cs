using ToDoListAPI.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using ToDoListAPI.Data;

/*
 * The registration controller enters a new user in the database, but before that it checks whether such a user exists.
 * also can edit user.
 * delete user also deletes all tasks and lists bilonged to this user
 */

namespace ToDoListAPI.Controllers
{
    public class RegisterController : ApiController
    {
        DBTool DBase = new DBTool();

        /*
         * Name - user name or mail
         * Password - user pasword
         * return error message if user already exists or OK otherwise
         * user ID is generated by SQL server
         */

        [HttpPost]
        [Route("api/user/add")]
        public ResponseModel PostAdd(string Name,string Password)
        {
            using (ToDoDBContext dbContext = new ToDoDBContext())
            {
                ResponseModel resp = new ResponseModel
                {
                    Error = "OK",
                    isOK = true
                };

                int id = DBase.UserExists(Name, Password);

                if(id > 0)
                {
                    resp.isOK = false;
                    resp.Error = "A user with that name and password already exists.";
                }
                else
                {
                    // The user ID defines the software so that a new ID number is automatically assigned.

                    // Saving in to the database
                    dbContext.Database.ExecuteSqlCommand("INSERT INTO Users(Name,Password) values('" + Name + "','" + Password + "')");
                }

                return resp;
            }
        }


        /*
         * Name - user name
         * Password - user password
         * both fileds can edit
         * 
         */
        [HttpGet]
        [Route("api/user/edit")]
        public ResponseModel GetEdit(string Name, string Password,string NewName,string NewPassword)
        {
            using (ToDoDBContext dbContext = new ToDoDBContext())
            {
                ResponseModel resp = new ResponseModel
                {
                    Error = "OK",
                    isOK = true
                };

                int id = DBase.UserExists(Name, Password);

                if (id == 0)
                {
                    resp.isOK = false;
                    resp.Error = "A user with that name and password do not exists.";
                }
                else
                {
                    // Update user's data
                    dbContext.Database.ExecuteSqlCommand("UPDATE Users SET Name = '" + NewName + "', Password = '" + NewPassword + "' WHERE ID = " + id);
                }

                return resp;
            }
        }


        /*
         * Name - user name
         * Password - user password
         * when deletes user, also deletes all his tasks and lists
         * there is no check if user exists. If user do not exists nothing will be deleted
         */
        [HttpGet]
        [Route("api/user/delete")]
        public ResponseModel GetDelete(string Name, string Password)
        {
            using (ToDoDBContext dbContext = new ToDoDBContext())
            {
                ResponseModel resp = new ResponseModel
                {
                    Error = "OK",
                    isOK = true
                };

                int id = DBase.UserExists(Name, Password);
                if (id == 0)
                {
                    resp.isOK = false;
                    resp.Error = "A user with that name and password do not exists.";
                }

                // Delete user from database
                dbContext.Database.ExecuteSqlCommand("DELETE FROM Users WHERE ID = " + id);
                dbContext.Database.ExecuteSqlCommand("DELETE FROM Tasks WHERE UserID = " + id);
                dbContext.Database.ExecuteSqlCommand("DELETE FROM Lists WHERE UserID = " + id);

                return resp;
            }
        }
    }
}